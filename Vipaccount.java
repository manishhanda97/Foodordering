import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.View;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author miah
 */
public class Vipaccount extends javax.swing.JPanel {

  
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form Vipaccount
     */
    public Vipaccount() {
        //set positions 
        initComponents();
         try {
            VIPACCOUNTINFO(); //calls onto the text file to loadwhile into the table complents before everything is created
        } catch (IOException ex) {
            Logger.getLogger(Vipaccount.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        VipTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        VipTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Vip Account", "Amount"
            }
        ) {
			private static final long serialVersionUID = 1L;
			
			Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(VipTable);

        jLabel1.setText("Vip Account Number");

        jLabel2.setText("Account Recharge Amount");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
        });

        jButton1.setText("Update");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(29, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        ))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addContainerGap())
        );
    }// </editor-fold>                                                        

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {                                       
 if (evt.getKeyCode() == KeyEvent.VK_ENTER){ //When the key enter is pressed 
           // this is going to add information to the table 
           if (jTextField1.getText().equals("")){ 
               JOptionPane.showMessageDialog(this, "Field is blank"); // this shows an error message if the text field is blank 
           
           }
           if (jTextField1.getText().length() > 8 || jTextField1.getText().length() < 8){ //shows an error message if the text field is less or greater than 8 characters 
               JOptionPane.showMessageDialog(this, "Invalid Account Number");
           }

           else {
               //Stores in an array 
                String data [] = {jTextField1.getText()};
                
                DefaultTableModel viptable = (DefaultTableModel) VipTable.getModel(); //sets the table 
    
                boolean checking = false; //sets checking to false 
                int VIPTABLE = 0; //gets the column number 
               for (int i = 0; i < viptable.getRowCount(); i++){ //gets the row count to loop thorugh
                   
                   Object datas = viptable.getValueAt(i, VIPTABLE); // gets the specfic number at the row and column number and makes it a string
                   if (datas != null){ 
                   String datass = datas.toString(); 
                   if (datas.equals(data[0])) { //if the data equal something already in the array 
                   checking = true; //set checking to true 
                    break; //break out the loop 
                   } 
               }
                  
               }
               if (checking){ //if checking is true display a message 
                   JOptionPane.showMessageDialog(this, "Account Exists"); 
               }
               else { 
                   
                   viptable.addRow(data); //if its not true add to the table 
                  /*  try { 
                        Tableinfo(); //call this method that writes it to a file 
                    } catch (IOException ex) {
                        Logger.getLogger(VIP.class.getName()).log(Level.SEVERE, null, ex);
                    }*/ 
               }
           } 
           
       }        // TODO add your handling code here:
    }                                      

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {                                       
  if (evt.getKeyCode() == KeyEvent.VK_ENTER){ //when the enter button is pressed 
      int selected = VipTable.getSelectedRow(); //when a table is selected 
      if (selected != -1) { // if the selected is not null 
          if (jTextField2.getText().matches("[0-9]+")){ //checks to see if it matches a number 
          VipTable.setValueAt(jTextField2.getText(), selected, 1); // get the selected row and set the value in the column
          jTextField2.setText("");} 
          else { JOptionPane.showMessageDialog(this, "Numbers only");} // error if not a number
            }  //reset the text field to nothing 
       
      else {  JOptionPane.showMessageDialog(this, "A Account was not selected ");}  //error message if a selection statement is null 
      
      
  }        // TODO add your handling code here:
    }                                      

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        
        int count = VipTable.getRowCount();  //gets the number of rows 
        int row = VipTable.getSelectedRow();  // gets the selected row 
        int col = VipTable.getSelectedColumn(); //gets the selected column 
        int selected = VipTable.getSelectedRow();  //gets the selected row 
       
        String info = (String) VipTable.getValueAt(row, col); // gets the infomaotion at the selcted row and col  
        
            
        
        DefaultTableModel viptable = (DefaultTableModel) VipTable.getModel();  // gets the table 
        viptable.removeRow(selected); // removes the selected row and shows message from the selected row and col 
        JOptionPane.showMessageDialog(this, "Account has been deleted: \n If this was an accident this account number is presented below \n " +info);        // TODO add your handling code here:
    }                                     

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {                                      
  try {
            // TODO add your handling code here:
            Tableinfo(); //updates/ gets the txt file 
            
        } catch (IOException ex) {
            Logger.getLogger(Vipaccount.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "Update Completed");        // TODO add your handling code here:
    }                                     

 public void Tableinfo() throws IOException{ 
            File tmp = new File("VipAccount.txt"); //file 
            BufferedWriter bfw = new BufferedWriter(new FileWriter("VipAccount.txt"));  //file is created
            if (tmp.exists()) { // if the file exists 
                BufferedReader reader = new BufferedReader(new FileReader("VipAccount.txt")); //read the file 
                String VipAccount = reader.readLine(); //read the header
                String Amount = reader.readLine(); // read the 2nd header 
               if (VipAccount != null){
                   bfw.write(VipAccount); // write the header
                   bfw.newLine(); 
            }
                      if (Amount != null){
                   bfw.write(VipAccount); // write the header
                   bfw.newLine(); 
            }
              reader.close(); // close 
            } else { 
            bfw.write("VIP Account\t Amount"); // if its not written then write them 
            bfw.newLine();} //go to the next line 
            //this below just goes line by line and gets the elements and uses tab to sepeater 
for(int i = 0 ; i < VipTable.getColumnCount() ; i++)
  {
    bfw.write(VipTable.getColumnName(i)); 
    bfw.write("\t");
  }

  for (int i = 0 ; i < VipTable.getRowCount(); i++)
  {
    bfw.newLine();
    for(int j = 0 ; j < VipTable.getColumnCount();j++)
    {
      bfw.write((String)(VipTable.getValueAt(i,j)));
      bfw.write("\t");;
    }
  }
  bfw.flush(); //clear the buffer
  bfw.close();// close 
                
            } 
       
         public void VIPACCOUNTINFO() throws IOException{ 
         //open and read the file 
         String filename = "VipAccount.txt"; //names the file 
         File file = new File(filename);  // the file 
         
         BufferedReader bfw = new BufferedReader(new FileReader(file));  // puts it in memeory 
         String accountnumber = bfw.readLine(); 
         if (accountnumber != null) {
          accountnumber = accountnumber.trim(); //gets the lines 
         String [] row = accountnumber.split("\t");  // splits it at the table 
         DefaultTableModel viptable = (DefaultTableModel) VipTable.getModel();  //gets the table 
         viptable.setColumnIdentifiers(row); //column rows 
         // add the data in the table 
         Object [] table = bfw.lines().toArray();  //stores each line read in the array from the buffer 
         for (int i = 0; i < table.length; i++){ //loops through the code 
         String splits = table[i].toString().trim(); //splits into smaller arrays at the tab 
         String [] accountnum = splits.split("\t"); //split at tab 
         viptable.addRow(accountnum); //adds to the rows 
     } } 
         bfw.close();  //closes buffer 
     }
    // Variables declaration - do not modify                     
    private javax.swing.JTable VipTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration                   
}